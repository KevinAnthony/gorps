// Code generated by mockery v2.35.4. DO NOT EDIT.

package http

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RequestBrokerMock is an autogenerated mock type for the RequestBroker type
type RequestBrokerMock struct {
	mock.Mock
}

// Delete provides a mock function with given fields:
func (_m *RequestBrokerMock) Delete() RequestBroker {
	ret := _m.Called()

	var r0 RequestBroker
	if rf, ok := ret.Get(0).(func() RequestBroker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RequestBroker)
		}
	}

	return r0
}

// Domain provides a mock function with given fields: _a0
func (_m *RequestBrokerMock) Domain(_a0 string) RequestBroker {
	ret := _m.Called(_a0)

	var r0 RequestBroker
	if rf, ok := ret.Get(0).(func(string) RequestBroker); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RequestBroker)
		}
	}

	return r0
}

// Get provides a mock function with given fields:
func (_m *RequestBrokerMock) Get() RequestBroker {
	ret := _m.Called()

	var r0 RequestBroker
	if rf, ok := ret.Get(0).(func() RequestBroker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RequestBroker)
		}
	}

	return r0
}

// Go provides a mock function with given fields: ctx, v
func (_m *RequestBrokerMock) Go(ctx context.Context, v interface{}) error {
	ret := _m.Called(ctx, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Header provides a mock function with given fields: _a0, _a1
func (_m *RequestBrokerMock) Header(_a0 string, _a1 string) RequestBroker {
	ret := _m.Called(_a0, _a1)

	var r0 RequestBroker
	if rf, ok := ret.Get(0).(func(string, string) RequestBroker); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RequestBroker)
		}
	}

	return r0
}

// Parameter provides a mock function with given fields: _a0, _a1
func (_m *RequestBrokerMock) Parameter(_a0 string, _a1 string) RequestBroker {
	ret := _m.Called(_a0, _a1)

	var r0 RequestBroker
	if rf, ok := ret.Get(0).(func(string, string) RequestBroker); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RequestBroker)
		}
	}

	return r0
}

// Path provides a mock function with given fields: _a0
func (_m *RequestBrokerMock) Path(_a0 string) RequestBroker {
	ret := _m.Called(_a0)

	var r0 RequestBroker
	if rf, ok := ret.Get(0).(func(string) RequestBroker); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RequestBroker)
		}
	}

	return r0
}

// Post provides a mock function with given fields:
func (_m *RequestBrokerMock) Post() RequestBroker {
	ret := _m.Called()

	var r0 RequestBroker
	if rf, ok := ret.Get(0).(func() RequestBroker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RequestBroker)
		}
	}

	return r0
}

// Put provides a mock function with given fields:
func (_m *RequestBrokerMock) Put() RequestBroker {
	ret := _m.Called()

	var r0 RequestBroker
	if rf, ok := ret.Get(0).(func() RequestBroker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RequestBroker)
		}
	}

	return r0
}

// Query provides a mock function with given fields: _a0, _a1
func (_m *RequestBrokerMock) Query(_a0 string, _a1 string) RequestBroker {
	ret := _m.Called(_a0, _a1)

	var r0 RequestBroker
	if rf, ok := ret.Get(0).(func(string, string) RequestBroker); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RequestBroker)
		}
	}

	return r0
}

// NewRequestBrokerMock creates a new instance of RequestBrokerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRequestBrokerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RequestBrokerMock {
	mock := &RequestBrokerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
