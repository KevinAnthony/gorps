// Code generated by mockery v2.35.4. DO NOT EDIT.

package http

import (
	nethttp "net/http"

	mock "github.com/stretchr/testify/mock"
)

// ClientMock is an autogenerated mock type for the Client type
type ClientMock struct {
	mock.Mock
}

// Do provides a mock function with given fields: req
func (_m *ClientMock) Do(req *nethttp.Request) ([]byte, error) {
	ret := _m.Called(req)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*nethttp.Request) ([]byte, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*nethttp.Request) []byte); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*nethttp.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoAndUnmarshal provides a mock function with given fields: req, v
func (_m *ClientMock) DoAndUnmarshal(req *nethttp.Request, v interface{}) error {
	ret := _m.Called(req, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(*nethttp.Request, interface{}) error); ok {
		r0 = rf(req, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClientMock creates a new instance of ClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientMock {
	mock := &ClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
