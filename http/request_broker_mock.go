// Code generated by mockery v2.35.4. DO NOT EDIT.

package http

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	nethttp "net/http"
)

// RequestBrokerMock is an autogenerated mock type for the RequestBroker type
type RequestBrokerMock struct {
	mock.Mock
}

// Body provides a mock function with given fields: body
func (_m *RequestBrokerMock) Body(body string) RequestBroker {
	ret := _m.Called(body)

	var r0 RequestBroker
	if rf, ok := ret.Get(0).(func(string) RequestBroker); ok {
		r0 = rf(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RequestBroker)
		}
	}

	return r0
}

// CreateRequest provides a mock function with given fields: ctx
func (_m *RequestBrokerMock) CreateRequest(ctx context.Context) (*nethttp.Request, error) {
	ret := _m.Called(ctx)

	var r0 *nethttp.Request
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*nethttp.Request, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *nethttp.Request); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nethttp.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields:
func (_m *RequestBrokerMock) Delete() RequestBroker {
	ret := _m.Called()

	var r0 RequestBroker
	if rf, ok := ret.Get(0).(func() RequestBroker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RequestBroker)
		}
	}

	return r0
}

// Do provides a mock function with given fields: ctx
func (_m *RequestBrokerMock) Do(ctx context.Context) (io.Reader, error) {
	ret := _m.Called(ctx)

	var r0 io.Reader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (io.Reader, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) io.Reader); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoAndUnmarshal provides a mock function with given fields: ctx, v
func (_m *RequestBrokerMock) DoAndUnmarshal(ctx context.Context, v interface{}) error {
	ret := _m.Called(ctx, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields:
func (_m *RequestBrokerMock) Get() RequestBroker {
	ret := _m.Called()

	var r0 RequestBroker
	if rf, ok := ret.Get(0).(func() RequestBroker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RequestBroker)
		}
	}

	return r0
}

// Header provides a mock function with given fields: key, value
func (_m *RequestBrokerMock) Header(key string, value string) RequestBroker {
	ret := _m.Called(key, value)

	var r0 RequestBroker
	if rf, ok := ret.Get(0).(func(string, string) RequestBroker); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RequestBroker)
		}
	}

	return r0
}

// Post provides a mock function with given fields:
func (_m *RequestBrokerMock) Post() RequestBroker {
	ret := _m.Called()

	var r0 RequestBroker
	if rf, ok := ret.Get(0).(func() RequestBroker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RequestBroker)
		}
	}

	return r0
}

// Put provides a mock function with given fields:
func (_m *RequestBrokerMock) Put() RequestBroker {
	ret := _m.Called()

	var r0 RequestBroker
	if rf, ok := ret.Get(0).(func() RequestBroker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RequestBroker)
		}
	}

	return r0
}

// Query provides a mock function with given fields: key, value
func (_m *RequestBrokerMock) Query(key string, value string) RequestBroker {
	ret := _m.Called(key, value)

	var r0 RequestBroker
	if rf, ok := ret.Get(0).(func(string, string) RequestBroker); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RequestBroker)
		}
	}

	return r0
}

// URL provides a mock function with given fields: url, v
func (_m *RequestBrokerMock) URL(url string, v ...interface{}) RequestBroker {
	var _ca []interface{}
	_ca = append(_ca, url)
	_ca = append(_ca, v...)
	ret := _m.Called(_ca...)

	var r0 RequestBroker
	if rf, ok := ret.Get(0).(func(string, ...interface{}) RequestBroker); ok {
		r0 = rf(url, v...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RequestBroker)
		}
	}

	return r0
}

// NewRequestBrokerMock creates a new instance of RequestBrokerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRequestBrokerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RequestBrokerMock {
	mock := &RequestBrokerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
